// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'ark/balance.dart';
import 'ark/client.dart';
import 'ark/esplora.dart';
import 'ark/send.dart';
import 'ark/server_info.dart';
import 'ark/storage.dart';
import 'ark/transactions.dart';
import 'ark/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class LibArk extends BaseEntrypoint<LibArkApi, LibArkApiImpl, LibArkWire> {
  @internal
  static final instance = LibArk._();

  LibArk._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibArkApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required LibArkApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibArkApiImpl, LibArkWire> get apiImplConstructor =>
      LibArkApiImpl.new;

  @override
  WireConstructor<LibArkWire> get wireConstructor =>
      LibArkWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -377137558;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'ark_wallet',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class LibArkApi extends BaseApi {
  ArcClientEsploraClientWalletInMemoryDb
  crateArkClientArkClientAutoAccessorGetInner({required ArkClient that});

  void crateArkClientArkClientAutoAccessorSetInner({
    required ArkClient that,
    required ArcClientEsploraClientWalletInMemoryDb inner,
  });

  Future<Balance> crateArkClientArkClientBalance({required ArkClient that});

  String crateArkClientArkClientBoardingAddress({required ArkClient that});

  Future<List<Transaction>> crateArkClientArkClientFetchTransactions({
    required ArkClient that,
  });

  Future<ArkClient> crateArkClientArkClientInit({
    required String nsec,
    required String network,
    required String esplora,
    required String server,
  });

  String crateArkClientArkClientOffchainAddress({required ArkClient that});

  Future<Txid> crateArkClientArkClientSendOffChain({
    required ArkClient that,
    required String address,
    required BigInt sats,
  });

  Future<Txid> crateArkClientArkClientSendOnChain({
    required ArkClient that,
    required String address,
    required BigInt sats,
  });

  ServerInfo crateArkClientArkClientServerInfo({required ArkClient that});

  Future<void> crateArkEsploraEsploraClientCheckConnection({
    required EsploraClient that,
  });

  Future<EsploraClient> crateArkEsploraEsploraClientNew({required String url});

  Future<InMemoryDb> crateArkStorageInMemoryDbDefault();

  bool crateArkUtilsUtilsIsArk({required String address});

  bool crateArkUtilsUtilsIsBtc({required String address});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDb;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArkClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArkClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArkClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EsploraClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EsploraClient;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EsploraClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InMemoryDbPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Txid;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Txid;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TxidPtr;
}

class LibArkApiImpl extends LibArkApiImplPlatform implements LibArkApi {
  LibArkApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  ArcClientEsploraClientWalletInMemoryDb
  crateArkClientArkClientAutoAccessorGetInner({required ArkClient that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkClientArkClientAutoAccessorGetInnerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientAutoAccessorGetInnerConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_auto_accessor_get_inner",
        argNames: ["that"],
      );

  @override
  void crateArkClientArkClientAutoAccessorSetInner({
    required ArkClient that,
    required ArcClientEsploraClientWalletInMemoryDb inner,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
            inner,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkClientArkClientAutoAccessorSetInnerConstMeta,
        argValues: [that, inner],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientAutoAccessorSetInnerConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_auto_accessor_set_inner",
        argNames: ["that", "inner"],
      );

  @override
  Future<Balance> crateArkClientArkClientBalance({required ArkClient that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_balance,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientBalanceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientBalanceConstMeta =>
      const TaskConstMeta(debugName: "ArkClient_balance", argNames: ["that"]);

  @override
  String crateArkClientArkClientBoardingAddress({required ArkClient that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientBoardingAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientBoardingAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_boarding_address",
        argNames: ["that"],
      );

  @override
  Future<List<Transaction>> crateArkClientArkClientFetchTransactions({
    required ArkClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientFetchTransactionsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientFetchTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_fetch_transactions",
        argNames: ["that"],
      );

  @override
  Future<ArkClient> crateArkClientArkClientInit({
    required String nsec,
    required String network,
    required String esplora,
    required String server,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(nsec, serializer);
          sse_encode_String(network, serializer);
          sse_encode_String(esplora, serializer);
          sse_encode_String(server, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientInitConstMeta,
        argValues: [nsec, network, esplora, server],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientInitConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_init",
        argNames: ["nsec", "network", "esplora", "server"],
      );

  @override
  String crateArkClientArkClientOffchainAddress({required ArkClient that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientOffchainAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientOffchainAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_offchain_address",
        argNames: ["that"],
      );

  @override
  Future<Txid> crateArkClientArkClientSendOffChain({
    required ArkClient that,
    required String address,
    required BigInt sats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(sats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientSendOffChainConstMeta,
        argValues: [that, address, sats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientSendOffChainConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_send_off_chain",
        argNames: ["that", "address", "sats"],
      );

  @override
  Future<Txid> crateArkClientArkClientSendOnChain({
    required ArkClient that,
    required String address,
    required BigInt sats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(sats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientSendOnChainConstMeta,
        argValues: [that, address, sats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientSendOnChainConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_send_on_chain",
        argNames: ["that", "address", "sats"],
      );

  @override
  ServerInfo crateArkClientArkClientServerInfo({required ArkClient that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_server_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkClientServerInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkClientServerInfoConstMeta =>
      const TaskConstMeta(
        debugName: "ArkClient_server_info",
        argNames: ["that"],
      );

  @override
  Future<void> crateArkEsploraEsploraClientCheckConnection({
    required EsploraClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkEsploraEsploraClientCheckConnectionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkEsploraEsploraClientCheckConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "EsploraClient_check_connection",
        argNames: ["that"],
      );

  @override
  Future<EsploraClient> crateArkEsploraEsploraClientNew({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkEsploraEsploraClientNewConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkEsploraEsploraClientNewConstMeta =>
      const TaskConstMeta(debugName: "EsploraClient_new", argNames: ["url"]);

  @override
  Future<InMemoryDb> crateArkStorageInMemoryDbDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkStorageInMemoryDbDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkStorageInMemoryDbDefaultConstMeta =>
      const TaskConstMeta(debugName: "InMemoryDb_default", argNames: []);

  @override
  bool crateArkUtilsUtilsIsArk({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkUtilsUtilsIsArkConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkUtilsUtilsIsArkConstMeta =>
      const TaskConstMeta(debugName: "utils_is_ark", argNames: ["address"]);

  @override
  bool crateArkUtilsUtilsIsBtc({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkUtilsUtilsIsBtcConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkUtilsUtilsIsBtcConstMeta =>
      const TaskConstMeta(debugName: "utils_is_btc", argNames: ["address"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDb =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDb =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArkClient => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArkClient => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EsploraClient => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EsploraClient => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryDb => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryDb => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Txid => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Txid => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDb
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ArkClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryDb
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Txid
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArkClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArkClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ArkClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Txid
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Balance dco_decode_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Balance(
      pending: dco_decode_u_64(arr[0]),
      confirmed: dco_decode_u_64(arr[1]),
      total: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  ServerInfo dco_decode_server_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ServerInfo(
      pk: dco_decode_String(arr[0]),
      vtxoTreeExpiry: dco_decode_u_32(arr[1]),
      unilateralExitDelay: dco_decode_u_32(arr[2]),
      boardingExitDelay: dco_decode_u_32(arr[3]),
      roundInterval: dco_decode_i_64(arr[4]),
      network: dco_decode_String(arr[5]),
      dust: dco_decode_u_64(arr[6]),
      forfeitAddress: dco_decode_String(arr[7]),
      version: dco_decode_String(arr[8]),
      utxoMinAmount: dco_decode_opt_box_autoadd_u_64(arr[9]),
      utxoMaxAmount: dco_decode_opt_box_autoadd_u_64(arr[10]),
      vtxoMinAmount: dco_decode_opt_box_autoadd_u_64(arr[11]),
      vtxoMaxAmount: dco_decode_opt_box_autoadd_u_64(arr[12]),
    );
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Transaction_Boarding(
          txid: dco_decode_String(raw[1]),
          amountSats: dco_decode_u_64(raw[2]),
          confirmedAt: dco_decode_opt_box_autoadd_i_64(raw[3]),
        );
      case 1:
        return Transaction_Commitment(
          txid: dco_decode_String(raw[1]),
          amountSats: dco_decode_i_64(raw[2]),
          createdAt: dco_decode_i_64(raw[3]),
        );
      case 2:
        return Transaction_Redeem(
          txid: dco_decode_String(raw[1]),
          amountSats: dco_decode_i_64(raw[2]),
          isSettled: dco_decode_bool(raw[3]),
          createdAt: dco_decode_i_64(raw[4]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Utils dco_decode_utils(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Utils();
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDb
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryDb
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Txid
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxidImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Txid
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxidImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pending = sse_decode_u_64(deserializer);
    var var_confirmed = sse_decode_u_64(deserializer);
    var var_total = sse_decode_u_64(deserializer);
    return Balance(
      pending: var_pending,
      confirmed: var_confirmed,
      total: var_total,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ServerInfo sse_decode_server_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pk = sse_decode_String(deserializer);
    var var_vtxoTreeExpiry = sse_decode_u_32(deserializer);
    var var_unilateralExitDelay = sse_decode_u_32(deserializer);
    var var_boardingExitDelay = sse_decode_u_32(deserializer);
    var var_roundInterval = sse_decode_i_64(deserializer);
    var var_network = sse_decode_String(deserializer);
    var var_dust = sse_decode_u_64(deserializer);
    var var_forfeitAddress = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_utxoMinAmount = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_utxoMaxAmount = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_vtxoMinAmount = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_vtxoMaxAmount = sse_decode_opt_box_autoadd_u_64(deserializer);
    return ServerInfo(
      pk: var_pk,
      vtxoTreeExpiry: var_vtxoTreeExpiry,
      unilateralExitDelay: var_unilateralExitDelay,
      boardingExitDelay: var_boardingExitDelay,
      roundInterval: var_roundInterval,
      network: var_network,
      dust: var_dust,
      forfeitAddress: var_forfeitAddress,
      version: var_version,
      utxoMinAmount: var_utxoMinAmount,
      utxoMaxAmount: var_utxoMaxAmount,
      vtxoMinAmount: var_vtxoMinAmount,
      vtxoMaxAmount: var_vtxoMaxAmount,
    );
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_txid = sse_decode_String(deserializer);
        var var_amountSats = sse_decode_u_64(deserializer);
        var var_confirmedAt = sse_decode_opt_box_autoadd_i_64(deserializer);
        return Transaction_Boarding(
          txid: var_txid,
          amountSats: var_amountSats,
          confirmedAt: var_confirmedAt,
        );
      case 1:
        var var_txid = sse_decode_String(deserializer);
        var var_amountSats = sse_decode_i_64(deserializer);
        var var_createdAt = sse_decode_i_64(deserializer);
        return Transaction_Commitment(
          txid: var_txid,
          amountSats: var_amountSats,
          createdAt: var_createdAt,
        );
      case 2:
        var var_txid = sse_decode_String(deserializer);
        var var_amountSats = sse_decode_i_64(deserializer);
        var var_isSettled = sse_decode_bool(deserializer);
        var var_createdAt = sse_decode_i_64(deserializer);
        return Transaction_Redeem(
          txid: var_txid,
          amountSats: var_amountSats,
          isSettled: var_isSettled,
          createdAt: var_createdAt,
        );
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Utils sse_decode_utils(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Utils();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    ArcClientEsploraClientWalletInMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcClientEsploraClientWalletInMemoryDbImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    ArkClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    InMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryDbImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    Txid self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TxidImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    ArkClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    ArkClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDb(
    ArcClientEsploraClientWalletInMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcClientEsploraClientWalletInMemoryDbImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkClient(
    ArkClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    InMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxid(
    Txid self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TxidImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.pending, serializer);
    sse_encode_u_64(self.confirmed, serializer);
    sse_encode_u_64(self.total, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
    PlatformInt64 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_transaction(
    List<Transaction> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
    PlatformInt64? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_server_info(ServerInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pk, serializer);
    sse_encode_u_32(self.vtxoTreeExpiry, serializer);
    sse_encode_u_32(self.unilateralExitDelay, serializer);
    sse_encode_u_32(self.boardingExitDelay, serializer);
    sse_encode_i_64(self.roundInterval, serializer);
    sse_encode_String(self.network, serializer);
    sse_encode_u_64(self.dust, serializer);
    sse_encode_String(self.forfeitAddress, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_opt_box_autoadd_u_64(self.utxoMinAmount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.utxoMaxAmount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.vtxoMinAmount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.vtxoMaxAmount, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Transaction_Boarding(
        txid: final txid,
        amountSats: final amountSats,
        confirmedAt: final confirmedAt,
      ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_u_64(amountSats, serializer);
        sse_encode_opt_box_autoadd_i_64(confirmedAt, serializer);
      case Transaction_Commitment(
        txid: final txid,
        amountSats: final amountSats,
        createdAt: final createdAt,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_i_64(amountSats, serializer);
        sse_encode_i_64(createdAt, serializer);
      case Transaction_Redeem(
        txid: final txid,
        amountSats: final amountSats,
        isSettled: final isSettled,
        createdAt: final createdAt,
      ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_i_64(amountSats, serializer);
        sse_encode_bool(isSettled, serializer);
        sse_encode_i_64(createdAt, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_utils(Utils self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ArcClientEsploraClientWalletInMemoryDbImpl extends RustOpaque
    implements ArcClientEsploraClientWalletInMemoryDb {
  // Not to be used by end users
  ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalDcoDecode(
    List<dynamic> wire,
  ) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcClientEsploraClientWalletInMemoryDbImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: LibArk
        .instance
        .api
        .rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDb,
    rustArcDecrementStrongCount: LibArk
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDb,
    rustArcDecrementStrongCountPtr: LibArk
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbPtr,
  );
}

@sealed
class ArkClientImpl extends RustOpaque implements ArkClient {
  // Not to be used by end users
  ArkClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArkClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_ArkClient,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_ArkClient,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_ArkClientPtr,
  );

  ArcClientEsploraClientWalletInMemoryDb get inner => LibArk.instance.api
      .crateArkClientArkClientAutoAccessorGetInner(that: this);

  set inner(ArcClientEsploraClientWalletInMemoryDb inner) => LibArk.instance.api
      .crateArkClientArkClientAutoAccessorSetInner(that: this, inner: inner);

  Future<Balance> balance() =>
      LibArk.instance.api.crateArkClientArkClientBalance(that: this);

  String boardingAddress() =>
      LibArk.instance.api.crateArkClientArkClientBoardingAddress(that: this);

  Future<List<Transaction>> fetchTransactions() =>
      LibArk.instance.api.crateArkClientArkClientFetchTransactions(that: this);

  String offchainAddress() =>
      LibArk.instance.api.crateArkClientArkClientOffchainAddress(that: this);

  Future<Txid> sendOffChain({required String address, required BigInt sats}) =>
      LibArk.instance.api.crateArkClientArkClientSendOffChain(
        that: this,
        address: address,
        sats: sats,
      );

  Future<Txid> sendOnChain({required String address, required BigInt sats}) =>
      LibArk.instance.api.crateArkClientArkClientSendOnChain(
        that: this,
        address: address,
        sats: sats,
      );

  ServerInfo serverInfo() =>
      LibArk.instance.api.crateArkClientArkClientServerInfo(that: this);
}

@sealed
class EsploraClientImpl extends RustOpaque implements EsploraClient {
  // Not to be used by end users
  EsploraClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EsploraClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_EsploraClient,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_EsploraClient,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_EsploraClientPtr,
  );

  Future<void> checkConnection() => LibArk.instance.api
      .crateArkEsploraEsploraClientCheckConnection(that: this);
}

@sealed
class InMemoryDbImpl extends RustOpaque implements InMemoryDb {
  // Not to be used by end users
  InMemoryDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InMemoryDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_InMemoryDb,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_InMemoryDb,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_InMemoryDbPtr,
  );
}

@sealed
class TxidImpl extends RustOpaque implements Txid {
  // Not to be used by end users
  TxidImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TxidImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_Txid,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_Txid,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_TxidPtr,
  );
}
