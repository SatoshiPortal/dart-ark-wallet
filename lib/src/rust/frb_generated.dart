// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'ark/balance.dart';
import 'ark/client.dart';
import 'ark/esplora.dart';
import 'ark/server_info.dart';
import 'ark/settle.dart';
import 'ark/storage.dart';
import 'ark/transactions.dart';
import 'ark/unilateral_exit.dart';
import 'ark/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class LibArk extends BaseEntrypoint<LibArkApi, LibArkApiImpl, LibArkWire> {
  @internal
  static final instance = LibArk._();

  LibArk._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibArkApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required LibArkApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibArkApiImpl, LibArkWire> get apiImplConstructor =>
      LibArkApiImpl.new;

  @override
  WireConstructor<LibArkWire> get wireConstructor =>
      LibArkWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1883637774;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'ark_wallet',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class LibArkApi extends BaseApi {
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  crateArkClientArkWalletAutoAccessorGetInner({required ArkWallet that});

  void crateArkClientArkWalletAutoAccessorSetInner({
    required ArkWallet that,
    required ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage inner,
  });

  Future<Balance> crateArkClientArkWalletBalance({required ArkWallet that});

  String crateArkClientArkWalletBoardingAddress({required ArkWallet that});

  Future<bool> crateArkClientArkWalletCanSettleBoarding({
    required ArkWallet that,
  });

  Future<String> crateArkClientArkWalletCollaborativeRedeem({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
    required bool selectRecoverableVtxos,
  });

  Future<BoardingSettlement> crateArkClientArkWalletGetBoardingStatus({
    required ArkWallet that,
  });

  Future<List<List<Transaction>>>
  crateArkClientArkWalletGetPresignedTransactions({required ArkWallet that});

  Future<List<VtxoInfo>> crateArkClientArkWalletGetVtxos({
    required ArkWallet that,
  });

  Future<ArkWallet> crateArkClientArkWalletInit({
    required List<int> secretKey,
    required String network,
    required String esplora,
    required String server,
    required String boltz,
  });

  String crateArkClientArkWalletOffchainAddress({required ArkWallet that});

  String crateArkClientArkWalletOnchainAddress({required ArkWallet that});

  Future<String> crateArkClientArkWalletSendOffChain({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
  });

  Future<String> crateArkClientArkWalletSendOnChain({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
  });

  Future<String> crateArkClientArkWalletSendUnilateralExit({
    required ArkWallet that,
    required String address,
    required BigInt amountSats,
  });

  ServerInfo crateArkClientArkWalletServerInfo({required ArkWallet that});

  Future<void> crateArkClientArkWalletSettle({
    required ArkWallet that,
    required bool selectRecoverableVtxos,
  });

  Future<BoardingSettlement> crateArkClientArkWalletSettleBoardingTransactions({
    required ArkWallet that,
    required bool selectRecoverableVtxos,
  });

  Future<List<Transaction>> crateArkClientArkWalletTransactionHistory({
    required ArkWallet that,
  });

  Future<void> crateArkEsploraEsploraClientCheckConnection({
    required EsploraClient that,
  });

  Future<EsploraClient> crateArkEsploraEsploraClientNew({required String url});

  Future<InMemoryDb> crateArkStorageInMemoryDbDefault();

  BigInt crateArkUnilateralExitVtxoChainInfoAutoAccessorGetChainHeight({
    required VtxoChainInfo that,
  });

  OutPoint crateArkUnilateralExitVtxoChainInfoAutoAccessorGetOutpoint({
    required VtxoChainInfo that,
  });

  BigInt crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionCount({
    required VtxoChainInfo that,
  });

  List<TransactionInfo>
  crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactions({
    required VtxoChainInfo that,
  });

  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetChainHeight({
    required VtxoChainInfo that,
    required BigInt chainHeight,
  });

  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetOutpoint({
    required VtxoChainInfo that,
    required OutPoint outpoint,
  });

  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionCount({
    required VtxoChainInfo that,
    required BigInt transactionCount,
  });

  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactions({
    required VtxoChainInfo that,
    required List<TransactionInfo> transactions,
  });

  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetAmount({
    required VtxoInfo that,
  });

  PlatformInt64? crateArkUnilateralExitVtxoInfoAutoAccessorGetConfirmationTime({
    required VtxoInfo that,
  });

  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetCreatedAt({
    required VtxoInfo that,
  });

  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetExpiresAt({
    required VtxoInfo that,
  });

  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsPreconfirmed({
    required VtxoInfo that,
  });

  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSpent({
    required VtxoInfo that,
  });

  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSwept({
    required VtxoInfo that,
  });

  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsUnrolled({
    required VtxoInfo that,
  });

  OutPoint crateArkUnilateralExitVtxoInfoAutoAccessorGetOutpoint({
    required VtxoInfo that,
  });

  String crateArkUnilateralExitVtxoInfoAutoAccessorGetScript({
    required VtxoInfo that,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetAmount({
    required VtxoInfo that,
    required PlatformInt64 amount,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetConfirmationTime({
    required VtxoInfo that,
    PlatformInt64? confirmationTime,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetCreatedAt({
    required VtxoInfo that,
    required PlatformInt64 createdAt,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetExpiresAt({
    required VtxoInfo that,
    required PlatformInt64 expiresAt,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsPreconfirmed({
    required VtxoInfo that,
    required bool isPreconfirmed,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSpent({
    required VtxoInfo that,
    required bool isSpent,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSwept({
    required VtxoInfo that,
    required bool isSwept,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsUnrolled({
    required VtxoInfo that,
    required bool isUnrolled,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetOutpoint({
    required VtxoInfo that,
    required OutPoint outpoint,
  });

  void crateArkUnilateralExitVtxoInfoAutoAccessorSetScript({
    required VtxoInfo that,
    required String script,
  });

  bool crateArkUtilsUtilsIsArk({required String address});

  bool crateArkUtilsUtilsIsBtc({required String address});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStoragePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArkWallet;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArkWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArkWalletPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EsploraClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EsploraClient;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EsploraClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InMemoryDbPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OutPoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OutPoint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OutPointPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtxoChainInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtxoChainInfo;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VtxoChainInfoPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtxoInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtxoInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VtxoInfoPtr;
}

class LibArkApiImpl extends LibArkApiImplPlatform implements LibArkApi {
  LibArkApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  crateArkClientArkWalletAutoAccessorGetInner({required ArkWallet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkClientArkWalletAutoAccessorGetInnerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletAutoAccessorGetInnerConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_auto_accessor_get_inner",
        argNames: ["that"],
      );

  @override
  void crateArkClientArkWalletAutoAccessorSetInner({
    required ArkWallet that,
    required ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage inner,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
            inner,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkClientArkWalletAutoAccessorSetInnerConstMeta,
        argValues: [that, inner],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletAutoAccessorSetInnerConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_auto_accessor_set_inner",
        argNames: ["that", "inner"],
      );

  @override
  Future<Balance> crateArkClientArkWalletBalance({required ArkWallet that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_balance,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletBalanceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletBalanceConstMeta =>
      const TaskConstMeta(debugName: "ArkWallet_balance", argNames: ["that"]);

  @override
  String crateArkClientArkWalletBoardingAddress({required ArkWallet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletBoardingAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletBoardingAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_boarding_address",
        argNames: ["that"],
      );

  @override
  Future<bool> crateArkClientArkWalletCanSettleBoarding({
    required ArkWallet that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletCanSettleBoardingConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletCanSettleBoardingConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_can_settle_boarding",
        argNames: ["that"],
      );

  @override
  Future<String> crateArkClientArkWalletCollaborativeRedeem({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
    required bool selectRecoverableVtxos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_i_64(sats, serializer);
          sse_encode_bool(selectRecoverableVtxos, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletCollaborativeRedeemConstMeta,
        argValues: [that, address, sats, selectRecoverableVtxos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletCollaborativeRedeemConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_collaborative_redeem",
        argNames: ["that", "address", "sats", "selectRecoverableVtxos"],
      );

  @override
  Future<BoardingSettlement> crateArkClientArkWalletGetBoardingStatus({
    required ArkWallet that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_boarding_settlement,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletGetBoardingStatusConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletGetBoardingStatusConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_get_boarding_status",
        argNames: ["that"],
      );

  @override
  Future<List<List<Transaction>>>
  crateArkClientArkWalletGetPresignedTransactions({required ArkWallet that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_list_transaction,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletGetPresignedTransactionsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletGetPresignedTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_get_presigned_transactions",
        argNames: ["that"],
      );

  @override
  Future<List<VtxoInfo>> crateArkClientArkWalletGetVtxos({
    required ArkWallet that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletGetVtxosConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletGetVtxosConstMeta =>
      const TaskConstMeta(debugName: "ArkWallet_get_vtxos", argNames: ["that"]);

  @override
  Future<ArkWallet> crateArkClientArkWalletInit({
    required List<int> secretKey,
    required String network,
    required String esplora,
    required String server,
    required String boltz,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(secretKey, serializer);
          sse_encode_String(network, serializer);
          sse_encode_String(esplora, serializer);
          sse_encode_String(server, serializer);
          sse_encode_String(boltz, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletInitConstMeta,
        argValues: [secretKey, network, esplora, server, boltz],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletInitConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_init",
        argNames: ["secretKey", "network", "esplora", "server", "boltz"],
      );

  @override
  String crateArkClientArkWalletOffchainAddress({required ArkWallet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletOffchainAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletOffchainAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_offchain_address",
        argNames: ["that"],
      );

  @override
  String crateArkClientArkWalletOnchainAddress({required ArkWallet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletOnchainAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletOnchainAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_onchain_address",
        argNames: ["that"],
      );

  @override
  Future<String> crateArkClientArkWalletSendOffChain({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_i_64(sats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletSendOffChainConstMeta,
        argValues: [that, address, sats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletSendOffChainConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_send_off_chain",
        argNames: ["that", "address", "sats"],
      );

  @override
  Future<String> crateArkClientArkWalletSendOnChain({
    required ArkWallet that,
    required String address,
    required PlatformInt64 sats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_i_64(sats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletSendOnChainConstMeta,
        argValues: [that, address, sats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletSendOnChainConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_send_on_chain",
        argNames: ["that", "address", "sats"],
      );

  @override
  Future<String> crateArkClientArkWalletSendUnilateralExit({
    required ArkWallet that,
    required String address,
    required BigInt amountSats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(amountSats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletSendUnilateralExitConstMeta,
        argValues: [that, address, amountSats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletSendUnilateralExitConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_send_unilateral_exit",
        argNames: ["that", "address", "amountSats"],
      );

  @override
  ServerInfo crateArkClientArkWalletServerInfo({required ArkWallet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_server_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletServerInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletServerInfoConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_server_info",
        argNames: ["that"],
      );

  @override
  Future<void> crateArkClientArkWalletSettle({
    required ArkWallet that,
    required bool selectRecoverableVtxos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_bool(selectRecoverableVtxos, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletSettleConstMeta,
        argValues: [that, selectRecoverableVtxos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletSettleConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_settle",
        argNames: ["that", "selectRecoverableVtxos"],
      );

  @override
  Future<BoardingSettlement> crateArkClientArkWalletSettleBoardingTransactions({
    required ArkWallet that,
    required bool selectRecoverableVtxos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          sse_encode_bool(selectRecoverableVtxos, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_boarding_settlement,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletSettleBoardingTransactionsConstMeta,
        argValues: [that, selectRecoverableVtxos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkClientArkWalletSettleBoardingTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_settle_boarding_transactions",
        argNames: ["that", "selectRecoverableVtxos"],
      );

  @override
  Future<List<Transaction>> crateArkClientArkWalletTransactionHistory({
    required ArkWallet that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkClientArkWalletTransactionHistoryConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkClientArkWalletTransactionHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "ArkWallet_transaction_history",
        argNames: ["that"],
      );

  @override
  Future<void> crateArkEsploraEsploraClientCheckConnection({
    required EsploraClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkEsploraEsploraClientCheckConnectionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkEsploraEsploraClientCheckConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "EsploraClient_check_connection",
        argNames: ["that"],
      );

  @override
  Future<EsploraClient> crateArkEsploraEsploraClientNew({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateArkEsploraEsploraClientNewConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkEsploraEsploraClientNewConstMeta =>
      const TaskConstMeta(debugName: "EsploraClient_new", argNames: ["url"]);

  @override
  Future<InMemoryDb> crateArkStorageInMemoryDbDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkStorageInMemoryDbDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkStorageInMemoryDbDefaultConstMeta =>
      const TaskConstMeta(debugName: "InMemoryDb_default", argNames: []);

  @override
  BigInt crateArkUnilateralExitVtxoChainInfoAutoAccessorGetChainHeight({
    required VtxoChainInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetChainHeightConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetChainHeightConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_get_chain_height",
        argNames: ["that"],
      );

  @override
  OutPoint crateArkUnilateralExitVtxoChainInfoAutoAccessorGetOutpoint({
    required VtxoChainInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetOutpointConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetOutpointConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_get_outpoint",
        argNames: ["that"],
      );

  @override
  BigInt crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionCount({
    required VtxoChainInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionCountConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionCountConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_get_transaction_count",
        argNames: ["that"],
      );

  @override
  List<TransactionInfo>
  crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactions({
    required VtxoChainInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction_info,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_get_transactions",
        argNames: ["that"],
      );

  @override
  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetChainHeight({
    required VtxoChainInfo that,
    required BigInt chainHeight,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          sse_encode_usize(chainHeight, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetChainHeightConstMeta,
        argValues: [that, chainHeight],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetChainHeightConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_set_chain_height",
        argNames: ["that", "chainHeight"],
      );

  @override
  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetOutpoint({
    required VtxoChainInfo that,
    required OutPoint outpoint,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
            outpoint,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetOutpointConstMeta,
        argValues: [that, outpoint],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetOutpointConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_set_outpoint",
        argNames: ["that", "outpoint"],
      );

  @override
  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionCount({
    required VtxoChainInfo that,
    required BigInt transactionCount,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          sse_encode_usize(transactionCount, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionCountConstMeta,
        argValues: [that, transactionCount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionCountConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_set_transaction_count",
        argNames: ["that", "transactionCount"],
      );

  @override
  void crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactions({
    required VtxoChainInfo that,
    required List<TransactionInfo> transactions,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
            that,
            serializer,
          );
          sse_encode_list_transaction_info(transactions, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionsConstMeta,
        argValues: [that, transactions],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoChainInfo_auto_accessor_set_transactions",
        argNames: ["that", "transactions"],
      );

  @override
  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetAmount({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetAmountConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetAmountConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_amount",
        argNames: ["that"],
      );

  @override
  PlatformInt64? crateArkUnilateralExitVtxoInfoAutoAccessorGetConfirmationTime({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetConfirmationTimeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetConfirmationTimeConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_confirmation_time",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetCreatedAt({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetCreatedAtConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_created_at",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateArkUnilateralExitVtxoInfoAutoAccessorGetExpiresAt({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetExpiresAtConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetExpiresAtConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_expires_at",
        argNames: ["that"],
      );

  @override
  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsPreconfirmed({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsPreconfirmedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsPreconfirmedConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_is_preconfirmed",
        argNames: ["that"],
      );

  @override
  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSpent({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsSpentConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsSpentConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_is_spent",
        argNames: ["that"],
      );

  @override
  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSwept({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsSweptConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsSweptConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_is_swept",
        argNames: ["that"],
      );

  @override
  bool crateArkUnilateralExitVtxoInfoAutoAccessorGetIsUnrolled({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsUnrolledConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetIsUnrolledConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_is_unrolled",
        argNames: ["that"],
      );

  @override
  OutPoint crateArkUnilateralExitVtxoInfoAutoAccessorGetOutpoint({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetOutpointConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetOutpointConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_outpoint",
        argNames: ["that"],
      );

  @override
  String crateArkUnilateralExitVtxoInfoAutoAccessorGetScript({
    required VtxoInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorGetScriptConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorGetScriptConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_get_script",
        argNames: ["that"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetAmount({
    required VtxoInfo that,
    required PlatformInt64 amount,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_i_64(amount, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetAmountConstMeta,
        argValues: [that, amount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetAmountConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_amount",
        argNames: ["that", "amount"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetConfirmationTime({
    required VtxoInfo that,
    PlatformInt64? confirmationTime,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_i_64(confirmationTime, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetConfirmationTimeConstMeta,
        argValues: [that, confirmationTime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetConfirmationTimeConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_confirmation_time",
        argNames: ["that", "confirmationTime"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetCreatedAt({
    required VtxoInfo that,
    required PlatformInt64 createdAt,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_i_64(createdAt, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetCreatedAtConstMeta,
        argValues: [that, createdAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_created_at",
        argNames: ["that", "createdAt"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetExpiresAt({
    required VtxoInfo that,
    required PlatformInt64 expiresAt,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_i_64(expiresAt, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetExpiresAtConstMeta,
        argValues: [that, expiresAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetExpiresAtConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_expires_at",
        argNames: ["that", "expiresAt"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsPreconfirmed({
    required VtxoInfo that,
    required bool isPreconfirmed,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_bool(isPreconfirmed, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsPreconfirmedConstMeta,
        argValues: [that, isPreconfirmed],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsPreconfirmedConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_is_preconfirmed",
        argNames: ["that", "isPreconfirmed"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSpent({
    required VtxoInfo that,
    required bool isSpent,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_bool(isSpent, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsSpentConstMeta,
        argValues: [that, isSpent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsSpentConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_is_spent",
        argNames: ["that", "isSpent"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSwept({
    required VtxoInfo that,
    required bool isSwept,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_bool(isSwept, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsSweptConstMeta,
        argValues: [that, isSwept],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsSweptConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_is_swept",
        argNames: ["that", "isSwept"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetIsUnrolled({
    required VtxoInfo that,
    required bool isUnrolled,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_bool(isUnrolled, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsUnrolledConstMeta,
        argValues: [that, isUnrolled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetIsUnrolledConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_is_unrolled",
        argNames: ["that", "isUnrolled"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetOutpoint({
    required VtxoInfo that,
    required OutPoint outpoint,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
            outpoint,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetOutpointConstMeta,
        argValues: [that, outpoint],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetOutpointConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_outpoint",
        argNames: ["that", "outpoint"],
      );

  @override
  void crateArkUnilateralExitVtxoInfoAutoAccessorSetScript({
    required VtxoInfo that,
    required String script,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
            that,
            serializer,
          );
          sse_encode_String(script, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateArkUnilateralExitVtxoInfoAutoAccessorSetScriptConstMeta,
        argValues: [that, script],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateArkUnilateralExitVtxoInfoAutoAccessorSetScriptConstMeta =>
      const TaskConstMeta(
        debugName: "VtxoInfo_auto_accessor_set_script",
        argNames: ["that", "script"],
      );

  @override
  bool crateArkUtilsUtilsIsArk({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkUtilsUtilsIsArkConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkUtilsUtilsIsArkConstMeta =>
      const TaskConstMeta(debugName: "utils_is_ark", argNames: ["address"]);

  @override
  bool crateArkUtilsUtilsIsBtc({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateArkUtilsUtilsIsBtcConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateArkUtilsUtilsIsBtcConstMeta =>
      const TaskConstMeta(debugName: "utils_is_btc", argNames: ["address"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArkWallet =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArkWallet =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EsploraClient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EsploraClient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryDb =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryDb =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OutPoint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OutPoint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtxoChainInfo =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtxoChainInfo =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VtxoInfo =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VtxoInfo =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ArkWallet
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryDb
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OutPoint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OutPointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoChainInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArkWallet
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoChainInfo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoInfo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArkWallet
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoChainInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  ArkWallet
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EsploraClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EsploraClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryDb
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OutPoint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OutPointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoChainInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtxoInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Balance dco_decode_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Balance(
      preconfirmed: dco_decode_i_64(arr[0]),
      settled: dco_decode_i_64(arr[1]),
      available: dco_decode_i_64(arr[2]),
      recoverable: dco_decode_i_64(arr[3]),
      total: dco_decode_i_64(arr[4]),
      boarding: dco_decode_boarding(arr[5]),
    );
  }

  @protected
  Boarding dco_decode_boarding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Boarding(
      unconfirmed: dco_decode_i_64(arr[0]),
      confirmed: dco_decode_i_64(arr[1]),
      total: dco_decode_i_64(arr[2]),
    );
  }

  @protected
  BoardingSettlement dco_decode_boarding_settlement(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BoardingSettlement(
      pendingCount: dco_decode_i_32(arr[0]),
      confirmedCount: dco_decode_i_32(arr[1]),
      totalPendingSats: dco_decode_i_64(arr[2]),
      totalConfirmedSats: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<VtxoInfo>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo,
        )
        .toList();
  }

  @protected
  List<List<Transaction>> dco_decode_list_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_transaction).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  List<TransactionInfo> dco_decode_list_transaction_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction_info).toList();
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  ServerInfo dco_decode_server_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return ServerInfo(
      version: dco_decode_String(arr[0]),
      signerPubkey: dco_decode_String(arr[1]),
      forfeitPubkey: dco_decode_String(arr[2]),
      forfeitAddress: dco_decode_String(arr[3]),
      checkpointTapscript: dco_decode_String(arr[4]),
      network: dco_decode_String(arr[5]),
      sessionDuration: dco_decode_i_64(arr[6]),
      unilateralExitDelay: dco_decode_u_32(arr[7]),
      boardingExitDelay: dco_decode_u_32(arr[8]),
      utxoMinAmount: dco_decode_opt_box_autoadd_i_64(arr[9]),
      utxoMaxAmount: dco_decode_opt_box_autoadd_i_64(arr[10]),
      vtxoMinAmount: dco_decode_opt_box_autoadd_i_64(arr[11]),
      vtxoMaxAmount: dco_decode_opt_box_autoadd_i_64(arr[12]),
      dust: dco_decode_i_64(arr[13]),
      digest: dco_decode_String(arr[14]),
    );
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Transaction_Boarding(
          txid: dco_decode_String(raw[1]),
          sats: dco_decode_i_64(raw[2]),
          confirmedAt: dco_decode_opt_box_autoadd_i_64(raw[3]),
        );
      case 1:
        return Transaction_Commitment(
          txid: dco_decode_String(raw[1]),
          sats: dco_decode_i_64(raw[2]),
          createdAt: dco_decode_i_64(raw[3]),
        );
      case 2:
        return Transaction_Redeem(
          txid: dco_decode_String(raw[1]),
          sats: dco_decode_i_64(raw[2]),
          isSettled: dco_decode_bool(raw[3]),
          createdAt: dco_decode_i_64(raw[4]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TransactionInfo dco_decode_transaction_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TransactionInfo(
      txid: dco_decode_String(arr[0]),
      isSigned: dco_decode_bool(arr[1]),
      inputCount: dco_decode_usize(arr[2]),
      outputCount: dco_decode_usize(arr[3]),
      totalSize: dco_decode_usize(arr[4]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Utils dco_decode_utils(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Utils();
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkWallet
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryDb
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OutPoint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OutPointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoChainInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkWallet
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoChainInfo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoInfo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkWallet
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoChainInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArkWallet
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EsploraClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EsploraClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryDb
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryDbImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OutPoint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OutPointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoChainInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoChainInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VtxoInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtxoInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_preconfirmed = sse_decode_i_64(deserializer);
    var var_settled = sse_decode_i_64(deserializer);
    var var_available = sse_decode_i_64(deserializer);
    var var_recoverable = sse_decode_i_64(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    var var_boarding = sse_decode_boarding(deserializer);
    return Balance(
      preconfirmed: var_preconfirmed,
      settled: var_settled,
      available: var_available,
      recoverable: var_recoverable,
      total: var_total,
      boarding: var_boarding,
    );
  }

  @protected
  Boarding sse_decode_boarding(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_unconfirmed = sse_decode_i_64(deserializer);
    var var_confirmed = sse_decode_i_64(deserializer);
    var var_total = sse_decode_i_64(deserializer);
    return Boarding(
      unconfirmed: var_unconfirmed,
      confirmed: var_confirmed,
      total: var_total,
    );
  }

  @protected
  BoardingSettlement sse_decode_boarding_settlement(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pendingCount = sse_decode_i_32(deserializer);
    var var_confirmedCount = sse_decode_i_32(deserializer);
    var var_totalPendingSats = sse_decode_i_64(deserializer);
    var var_totalConfirmedSats = sse_decode_i_64(deserializer);
    return BoardingSettlement(
      pendingCount: var_pendingCount,
      confirmedCount: var_confirmedCount,
      totalPendingSats: var_totalPendingSats,
      totalConfirmedSats: var_totalConfirmedSats,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<VtxoInfo>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <VtxoInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<List<Transaction>> sse_decode_list_list_transaction(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<Transaction>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<TransactionInfo> sse_decode_list_transaction_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TransactionInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction_info(deserializer));
    }
    return ans_;
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ServerInfo sse_decode_server_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_String(deserializer);
    var var_signerPubkey = sse_decode_String(deserializer);
    var var_forfeitPubkey = sse_decode_String(deserializer);
    var var_forfeitAddress = sse_decode_String(deserializer);
    var var_checkpointTapscript = sse_decode_String(deserializer);
    var var_network = sse_decode_String(deserializer);
    var var_sessionDuration = sse_decode_i_64(deserializer);
    var var_unilateralExitDelay = sse_decode_u_32(deserializer);
    var var_boardingExitDelay = sse_decode_u_32(deserializer);
    var var_utxoMinAmount = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_utxoMaxAmount = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_vtxoMinAmount = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_vtxoMaxAmount = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_dust = sse_decode_i_64(deserializer);
    var var_digest = sse_decode_String(deserializer);
    return ServerInfo(
      version: var_version,
      signerPubkey: var_signerPubkey,
      forfeitPubkey: var_forfeitPubkey,
      forfeitAddress: var_forfeitAddress,
      checkpointTapscript: var_checkpointTapscript,
      network: var_network,
      sessionDuration: var_sessionDuration,
      unilateralExitDelay: var_unilateralExitDelay,
      boardingExitDelay: var_boardingExitDelay,
      utxoMinAmount: var_utxoMinAmount,
      utxoMaxAmount: var_utxoMaxAmount,
      vtxoMinAmount: var_vtxoMinAmount,
      vtxoMaxAmount: var_vtxoMaxAmount,
      dust: var_dust,
      digest: var_digest,
    );
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_txid = sse_decode_String(deserializer);
        var var_sats = sse_decode_i_64(deserializer);
        var var_confirmedAt = sse_decode_opt_box_autoadd_i_64(deserializer);
        return Transaction_Boarding(
          txid: var_txid,
          sats: var_sats,
          confirmedAt: var_confirmedAt,
        );
      case 1:
        var var_txid = sse_decode_String(deserializer);
        var var_sats = sse_decode_i_64(deserializer);
        var var_createdAt = sse_decode_i_64(deserializer);
        return Transaction_Commitment(
          txid: var_txid,
          sats: var_sats,
          createdAt: var_createdAt,
        );
      case 2:
        var var_txid = sse_decode_String(deserializer);
        var var_sats = sse_decode_i_64(deserializer);
        var var_isSettled = sse_decode_bool(deserializer);
        var var_createdAt = sse_decode_i_64(deserializer);
        return Transaction_Redeem(
          txid: var_txid,
          sats: var_sats,
          isSettled: var_isSettled,
          createdAt: var_createdAt,
        );
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TransactionInfo sse_decode_transaction_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_isSigned = sse_decode_bool(deserializer);
    var var_inputCount = sse_decode_usize(deserializer);
    var var_outputCount = sse_decode_usize(deserializer);
    var var_totalSize = sse_decode_usize(deserializer);
    return TransactionInfo(
      txid: var_txid,
      isSigned: var_isSigned,
      inputCount: var_inputCount,
      outputCount: var_outputCount,
      totalSize: var_totalSize,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Utils sse_decode_utils(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Utils();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl)
          .frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    ArkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkWalletImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    InMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryDbImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    OutPoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OutPointImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    VtxoChainInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoChainInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    VtxoInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    ArkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkWalletImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    VtxoChainInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoChainInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    VtxoInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    ArkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkWalletImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    VtxoChainInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoChainInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    VtxoInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage(
    ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl)
          .frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArkWallet(
    ArkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArkWalletImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEsploraClient(
    EsploraClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EsploraClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryDb(
    InMemoryDb self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryDbImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutPoint(
    OutPoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OutPointImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoChainInfo(
    VtxoChainInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoChainInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    VtxoInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VtxoInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.preconfirmed, serializer);
    sse_encode_i_64(self.settled, serializer);
    sse_encode_i_64(self.available, serializer);
    sse_encode_i_64(self.recoverable, serializer);
    sse_encode_i_64(self.total, serializer);
    sse_encode_boarding(self.boarding, serializer);
  }

  @protected
  void sse_encode_boarding(Boarding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.unconfirmed, serializer);
    sse_encode_i_64(self.confirmed, serializer);
    sse_encode_i_64(self.total, serializer);
  }

  @protected
  void sse_encode_boarding_settlement(
    BoardingSettlement self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.pendingCount, serializer);
    sse_encode_i_32(self.confirmedCount, serializer);
    sse_encode_i_64(self.totalPendingSats, serializer);
    sse_encode_i_64(self.totalConfirmedSats, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
    PlatformInt64 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
    List<VtxoInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtxoInfo(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_list_transaction(
    List<List<Transaction>> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_transaction(
    List<Transaction> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction_info(
    List<TransactionInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction_info(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
    PlatformInt64? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_server_info(ServerInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.version, serializer);
    sse_encode_String(self.signerPubkey, serializer);
    sse_encode_String(self.forfeitPubkey, serializer);
    sse_encode_String(self.forfeitAddress, serializer);
    sse_encode_String(self.checkpointTapscript, serializer);
    sse_encode_String(self.network, serializer);
    sse_encode_i_64(self.sessionDuration, serializer);
    sse_encode_u_32(self.unilateralExitDelay, serializer);
    sse_encode_u_32(self.boardingExitDelay, serializer);
    sse_encode_opt_box_autoadd_i_64(self.utxoMinAmount, serializer);
    sse_encode_opt_box_autoadd_i_64(self.utxoMaxAmount, serializer);
    sse_encode_opt_box_autoadd_i_64(self.vtxoMinAmount, serializer);
    sse_encode_opt_box_autoadd_i_64(self.vtxoMaxAmount, serializer);
    sse_encode_i_64(self.dust, serializer);
    sse_encode_String(self.digest, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Transaction_Boarding(
        txid: final txid,
        sats: final sats,
        confirmedAt: final confirmedAt,
      ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_i_64(sats, serializer);
        sse_encode_opt_box_autoadd_i_64(confirmedAt, serializer);
      case Transaction_Commitment(
        txid: final txid,
        sats: final sats,
        createdAt: final createdAt,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_i_64(sats, serializer);
        sse_encode_i_64(createdAt, serializer);
      case Transaction_Redeem(
        txid: final txid,
        sats: final sats,
        isSettled: final isSettled,
        createdAt: final createdAt,
      ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_i_64(sats, serializer);
        sse_encode_bool(isSettled, serializer);
        sse_encode_i_64(createdAt, serializer);
    }
  }

  @protected
  void sse_encode_transaction_info(
    TransactionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_bool(self.isSigned, serializer);
    sse_encode_usize(self.inputCount, serializer);
    sse_encode_usize(self.outputCount, serializer);
    sse_encode_usize(self.totalSize, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_utils(Utils self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}

@sealed
class ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl
    extends RustOpaque
    implements ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage {
  // Not to be used by end users
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalDcoDecode(
    List<dynamic> wire,
  ) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorageImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk
            .instance
            .api
            .rust_arc_increment_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage,
    rustArcDecrementStrongCount:
        LibArk
            .instance
            .api
            .rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage,
    rustArcDecrementStrongCountPtr:
        LibArk
            .instance
            .api
            .rust_arc_decrement_strong_count_ArcClientEsploraClientWalletInMemoryDbInMemorySwapStoragePtr,
  );
}

@sealed
class ArkWalletImpl extends RustOpaque implements ArkWallet {
  // Not to be used by end users
  ArkWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArkWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_ArkWallet,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_ArkWallet,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_ArkWalletPtr,
  );

  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage get inner => LibArk
      .instance
      .api
      .crateArkClientArkWalletAutoAccessorGetInner(that: this);

  set inner(ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage inner) =>
      LibArk.instance.api.crateArkClientArkWalletAutoAccessorSetInner(
        that: this,
        inner: inner,
      );

  Future<Balance> balance() =>
      LibArk.instance.api.crateArkClientArkWalletBalance(that: this);

  String boardingAddress() =>
      LibArk.instance.api.crateArkClientArkWalletBoardingAddress(that: this);

  Future<bool> canSettleBoarding() =>
      LibArk.instance.api.crateArkClientArkWalletCanSettleBoarding(that: this);

  Future<String> collaborativeRedeem({
    required String address,
    required PlatformInt64 sats,
    required bool selectRecoverableVtxos,
  }) => LibArk.instance.api.crateArkClientArkWalletCollaborativeRedeem(
    that: this,
    address: address,
    sats: sats,
    selectRecoverableVtxos: selectRecoverableVtxos,
  );

  Future<BoardingSettlement> getBoardingStatus() =>
      LibArk.instance.api.crateArkClientArkWalletGetBoardingStatus(that: this);

  Future<List<List<Transaction>>> getPresignedTransactions() => LibArk
      .instance
      .api
      .crateArkClientArkWalletGetPresignedTransactions(that: this);

  Future<List<VtxoInfo>> getVtxos() =>
      LibArk.instance.api.crateArkClientArkWalletGetVtxos(that: this);

  String offchainAddress() =>
      LibArk.instance.api.crateArkClientArkWalletOffchainAddress(that: this);

  String onchainAddress() =>
      LibArk.instance.api.crateArkClientArkWalletOnchainAddress(that: this);

  Future<String> sendOffChain({
    required String address,
    required PlatformInt64 sats,
  }) => LibArk.instance.api.crateArkClientArkWalletSendOffChain(
    that: this,
    address: address,
    sats: sats,
  );

  Future<String> sendOnChain({
    required String address,
    required PlatformInt64 sats,
  }) => LibArk.instance.api.crateArkClientArkWalletSendOnChain(
    that: this,
    address: address,
    sats: sats,
  );

  Future<String> sendUnilateralExit({
    required String address,
    required BigInt amountSats,
  }) => LibArk.instance.api.crateArkClientArkWalletSendUnilateralExit(
    that: this,
    address: address,
    amountSats: amountSats,
  );

  ServerInfo serverInfo() =>
      LibArk.instance.api.crateArkClientArkWalletServerInfo(that: this);

  Future<void> settle({required bool selectRecoverableVtxos}) =>
      LibArk.instance.api.crateArkClientArkWalletSettle(
        that: this,
        selectRecoverableVtxos: selectRecoverableVtxos,
      );

  Future<BoardingSettlement> settleBoardingTransactions({
    required bool selectRecoverableVtxos,
  }) => LibArk.instance.api.crateArkClientArkWalletSettleBoardingTransactions(
    that: this,
    selectRecoverableVtxos: selectRecoverableVtxos,
  );

  Future<List<Transaction>> transactionHistory() =>
      LibArk.instance.api.crateArkClientArkWalletTransactionHistory(that: this);
}

@sealed
class EsploraClientImpl extends RustOpaque implements EsploraClient {
  // Not to be used by end users
  EsploraClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EsploraClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_EsploraClient,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_EsploraClient,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_EsploraClientPtr,
  );

  Future<void> checkConnection() => LibArk.instance.api
      .crateArkEsploraEsploraClientCheckConnection(that: this);
}

@sealed
class InMemoryDbImpl extends RustOpaque implements InMemoryDb {
  // Not to be used by end users
  InMemoryDbImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InMemoryDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_InMemoryDb,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_InMemoryDb,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_InMemoryDbPtr,
  );
}

@sealed
class OutPointImpl extends RustOpaque implements OutPoint {
  // Not to be used by end users
  OutPointImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OutPointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_OutPoint,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_OutPoint,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_OutPointPtr,
  );
}

@sealed
class VtxoChainInfoImpl extends RustOpaque implements VtxoChainInfo {
  // Not to be used by end users
  VtxoChainInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtxoChainInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_VtxoChainInfo,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_VtxoChainInfo,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_VtxoChainInfoPtr,
  );

  BigInt get chainHeight => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorGetChainHeight(
        that: this,
      );

  OutPoint get outpoint => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorGetOutpoint(that: this);

  BigInt get transactionCount => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactionCount(
        that: this,
      );

  List<TransactionInfo> get transactions => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorGetTransactions(
        that: this,
      );

  set chainHeight(BigInt chainHeight) => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorSetChainHeight(
        that: this,
        chainHeight: chainHeight,
      );

  set outpoint(OutPoint outpoint) => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorSetOutpoint(
        that: this,
        outpoint: outpoint,
      );

  set transactionCount(BigInt transactionCount) => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactionCount(
        that: this,
        transactionCount: transactionCount,
      );

  set transactions(List<TransactionInfo> transactions) => LibArk.instance.api
      .crateArkUnilateralExitVtxoChainInfoAutoAccessorSetTransactions(
        that: this,
        transactions: transactions,
      );
}

@sealed
class VtxoInfoImpl extends RustOpaque implements VtxoInfo {
  // Not to be used by end users
  VtxoInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtxoInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibArk.instance.api.rust_arc_increment_strong_count_VtxoInfo,
    rustArcDecrementStrongCount:
        LibArk.instance.api.rust_arc_decrement_strong_count_VtxoInfo,
    rustArcDecrementStrongCountPtr:
        LibArk.instance.api.rust_arc_decrement_strong_count_VtxoInfoPtr,
  );

  PlatformInt64 get amount => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetAmount(that: this);

  PlatformInt64? get confirmationTime => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetConfirmationTime(
        that: this,
      );

  PlatformInt64 get createdAt => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetCreatedAt(that: this);

  PlatformInt64 get expiresAt => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetExpiresAt(that: this);

  bool get isPreconfirmed => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetIsPreconfirmed(that: this);

  bool get isSpent => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSpent(that: this);

  bool get isSwept => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetIsSwept(that: this);

  bool get isUnrolled => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetIsUnrolled(that: this);

  OutPoint get outpoint => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetOutpoint(that: this);

  String get script => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorGetScript(that: this);

  set amount(PlatformInt64 amount) =>
      LibArk.instance.api.crateArkUnilateralExitVtxoInfoAutoAccessorSetAmount(
        that: this,
        amount: amount,
      );

  set confirmationTime(PlatformInt64? confirmationTime) => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorSetConfirmationTime(
        that: this,
        confirmationTime: confirmationTime,
      );

  set createdAt(PlatformInt64 createdAt) => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorSetCreatedAt(
        that: this,
        createdAt: createdAt,
      );

  set expiresAt(PlatformInt64 expiresAt) => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorSetExpiresAt(
        that: this,
        expiresAt: expiresAt,
      );

  set isPreconfirmed(bool isPreconfirmed) => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorSetIsPreconfirmed(
        that: this,
        isPreconfirmed: isPreconfirmed,
      );

  set isSpent(bool isSpent) =>
      LibArk.instance.api.crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSpent(
        that: this,
        isSpent: isSpent,
      );

  set isSwept(bool isSwept) =>
      LibArk.instance.api.crateArkUnilateralExitVtxoInfoAutoAccessorSetIsSwept(
        that: this,
        isSwept: isSwept,
      );

  set isUnrolled(bool isUnrolled) => LibArk.instance.api
      .crateArkUnilateralExitVtxoInfoAutoAccessorSetIsUnrolled(
        that: this,
        isUnrolled: isUnrolled,
      );

  set outpoint(OutPoint outpoint) =>
      LibArk.instance.api.crateArkUnilateralExitVtxoInfoAutoAccessorSetOutpoint(
        that: this,
        outpoint: outpoint,
      );

  set script(String script) =>
      LibArk.instance.api.crateArkUnilateralExitVtxoInfoAutoAccessorSetScript(
        that: this,
        script: script,
      );
}
