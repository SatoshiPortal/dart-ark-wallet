// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'balance.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'server_info.dart';
import 'settle.dart';
import 'transactions.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ArkWallet>>
abstract class ArkWallet implements RustOpaqueInterface {
  ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage get inner;

  set inner(ArcClientEsploraClientWalletInMemoryDbInMemorySwapStorage inner);

  Future<Balance> balance();

  String boardingAddress();

  Future<bool> canSettleBoarding();

  Future<String> collaborativeRedeem({
    required String address,
    required PlatformInt64 sats,
    required bool selectRecoverableVtxos,
  });

  Future<BoardingSettlement> getBoardingStatus();

  static Future<ArkWallet> init({
    required List<int> secretKey,
    required String network,
    required String esplora,
    required String server,
    required String boltz,
  }) => LibArk.instance.api.crateArkClientArkWalletInit(
    secretKey: secretKey,
    network: network,
    esplora: esplora,
    server: server,
    boltz: boltz,
  );

  String offchainAddress();

  String onchainAddress();

  Future<String> sendOffChain({
    required String address,
    required PlatformInt64 sats,
  });

  Future<String> sendOnChain({
    required String address,
    required PlatformInt64 sats,
  });

  ServerInfo serverInfo();

  Future<void> settle({required bool selectRecoverableVtxos});

  Future<BoardingSettlement> settleBoardingTransactions({
    required bool selectRecoverableVtxos,
  });

  Future<List<Transaction>> transactionHistory();
}
