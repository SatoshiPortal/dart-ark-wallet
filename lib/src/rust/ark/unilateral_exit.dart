// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `PresignedTransaction`, `TransactionSignatureInfo`, `UnilateralExitInfo`, `VtxoTreeInfo`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutPoint>>
abstract class OutPoint implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtxoChainInfo>>
abstract class VtxoChainInfo implements RustOpaqueInterface {
  BigInt get chainHeight;

  OutPoint get outpoint;

  BigInt get transactionCount;

  List<TransactionInfo> get transactions;

  set chainHeight(BigInt chainHeight);

  set outpoint(OutPoint outpoint);

  set transactionCount(BigInt transactionCount);

  set transactions(List<TransactionInfo> transactions);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtxoInfo>>
abstract class VtxoInfo implements RustOpaqueInterface {
  PlatformInt64 get amount;

  PlatformInt64? get confirmationTime;

  PlatformInt64 get createdAt;

  PlatformInt64 get expiresAt;

  bool get isPreconfirmed;

  bool get isSpent;

  bool get isSwept;

  bool get isUnrolled;

  OutPoint get outpoint;

  String get script;

  set amount(PlatformInt64 amount);

  set confirmationTime(PlatformInt64? confirmationTime);

  set createdAt(PlatformInt64 createdAt);

  set expiresAt(PlatformInt64 expiresAt);

  set isPreconfirmed(bool isPreconfirmed);

  set isSpent(bool isSpent);

  set isSwept(bool isSwept);

  set isUnrolled(bool isUnrolled);

  set outpoint(OutPoint outpoint);

  set script(String script);
}

class TransactionInfo {
  final String txid;
  final bool isSigned;
  final BigInt inputCount;
  final BigInt outputCount;
  final BigInt totalSize;

  const TransactionInfo({
    required this.txid,
    required this.isSigned,
    required this.inputCount,
    required this.outputCount,
    required this.totalSize,
  });

  @override
  int get hashCode =>
      txid.hashCode ^
      isSigned.hashCode ^
      inputCount.hashCode ^
      outputCount.hashCode ^
      totalSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionInfo &&
          runtimeType == other.runtimeType &&
          txid == other.txid &&
          isSigned == other.isSigned &&
          inputCount == other.inputCount &&
          outputCount == other.outputCount &&
          totalSize == other.totalSize;
}
